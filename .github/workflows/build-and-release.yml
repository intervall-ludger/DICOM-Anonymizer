name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get the version tag
        id: get_tag
        run: echo "::set-output name=TAG::${GITHUB_REF#refs/tags/}"
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
           python -m pip install -r ./requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --collect-submodules=pydicom  --noconsole --noconfirm DicomAnonymizer.py

      - name: Extract version
        id: get_version
        run: echo "::set-output name=VERSION::$(python setup.py --version)"
        shell: bash

      - name: Rename file
        run: mv ./dist/DicomAnonymizer ./dist/DicomAnonymizer-linux-${{  steps.get_tag.outputs.TAG }}

      - name: Upload Executable to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: DicomAnonymizer-linux-${{  steps.get_tag.outputs.TAG }}
          path: ./dist/DicomAnonymizer-linux-${{  steps.get_tag.outputs.TAG }}

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get the version tag
        id: get_tag
        run: echo "::set-output name=TAG::${GITHUB_REF#refs/tags/}"
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
           python -m pip install -r .\requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --collect-submodules=pydicom  --noconsole --noconfirm DicomAnonymizer.py

      - name: Extract version
        id: get_version
        run: echo "::set-output name=VERSION::$(python setup.py --version)"
        shell: bash

      - name: Rename file
        run: mv ./dist/DicomAnonymizer.exe ./dist/DicomAnonymizer-windows-${{  steps.get_tag.outputs.TAG }}.exe

      - name: Upload Executable to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: DicomAnonymizer-windows-${{  steps.get_tag.outputs.TAG }}
          path: ./dist/DicomAnonymizer-windows-${{  steps.get_tag.outputs.TAG }}.exe

  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get the version tag
        id: get_tag
        run: echo "::set-output name=TAG::${GITHUB_REF#refs/tags/}"
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
           python -m pip install -r ./requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --collect-submodules=pydicom  --noconsole --noconfirm DicomAnonymizer.py

      - name: Extract version
        id: get_version
        run: echo "::set-output name=VERSION::$(python setup.py --version)"
        shell: bash

      - name: Rename file
        run: mv ./dist/DicomAnonymizer ./dist/DicomAnonymizer-macos-${{  steps.get_tag.outputs.TAG }}

      - name: Upload Executable to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: DicomAnonymizer-macos-${{  steps.get_tag.outputs.TAG }}
          path: ./dist/DicomAnonymizer-macos-${{  steps.get_tag.outputs.TAG }}

  create-release:
    name: Create Release and Upload Assets
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: List downloaded files
        run: |
          echo "Listing files in the current directory:"
          pwd
          ls -Rlah

      - name: Get the version tag for release
        id: get_tag
        run: echo "::set-output name=TAG::${GITHUB_REF#refs/tags/}"
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path:  ./DicomAnonymizer-windows-${{ steps.get_tag.outputs.TAG }}/DicomAnonymizer-windows-${{ steps.get_tag.outputs.TAG }}.exe
          asset_name: DicomAnonymizer-windows-${{ steps.get_tag.outputs.TAG }}.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./DicomAnonymizer-macos-${{ steps.get_tag.outputs.TAG }}/DicomAnonymizer-macos-${{ steps.get_tag.outputs.TAG }}
          asset_name: DicomAnonymizer-macos-${{ steps.get_tag.outputs.TAG }}
          asset_content_type: application/octet-stream

      - name: Upload Linux Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./DicomAnonymizer-linux-${{ steps.get_tag.outputs.TAG }}/DicomAnonymizer-linux-${{ steps.get_tag.outputs.TAG }}
          asset_name: DicomAnonymizer-linux-${{ steps.get_tag.outputs.TAG }}
          asset_content_type: application/octet-stream
